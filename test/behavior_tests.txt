// test atoms
4 -> 4 : Int
45 -> 45

"" -> "" : [Char]
"hi" -> "hi"
"//" -> "//"
!;"\n\\" -> ["\n","\\"]
!;"\x02\x20\xaa" -> ["\x02"," ","\xaa"]

// test utf8 encoding chars
!;"├───╯" -> ["├","─","─","─","╯"]

'a -> 'a
'\n -> '\n
'\0 -> '\0
'\ -> '\\
'" -> '"
'' -> ''
//'-> asdf
'\xff-'\0 -> 255
'\xff -> '\xff
'\0+5 -> '\x05

// disallowed since not needed
// '\" -> '\"'
// '\' -> '''

/////////////////// test basic ops
~5 -> -5
~~5 -> 5
1+2 -> 3
1+["a" -> 'b
1+$ -> AtlasTypeError
$%2 -> AtlasTypeError
// leading 0 is separate number
0-12 -> -12
0/12 -> 0
$ -> [] : Nil

5:$ -> [5]
5:6 -> AtlasTypeError
5:6:$ -> [5,6]


[5:6:$ -> 5
[$ -> DynamicError
]5:6:$ -> 6
]$ -> DynamicError
> 5:6:$ -> [6]
> 5:$ -> []
// todo may want to reconsider and make empty
tail $ -> DynamicError

/////////// test vars
(v1=5)+v1 -> 10

//////// test infinite list
v1=1:v1 -> [1,1,1,1,1,1,...
v1='-:v1 -> "-------------...

////////////// test zips
1+3:4:$ -> [4,5]
((3:4:$):(5:7:$):$)+1 -> [[4,5],[6,8]]
1+"asdf" -> "bteg"
"asdf"+1 -> "bteg"
(1:2:$)+4:6:8:$ -> [5,8]
(4:6:8:$)+1:2:$ -> [5,8]

4*5 -> 20

4-1 -> 3
"asdf"-1 -> "`rce"
"abcd"-"aaa" -> [0,1,2]

10/5 -> 2
9/5 -> 1
11/~5 -> -3
10/~5 -> -2
(~11)/5 -> -3
(~10)/5 -> -2
(~10)/~5 -> 2
(~9)/~5 -> 1
1/0 -> DynamicError
0/0 -> DynamicError

10%5 -> 0
9%5 -> 4
11%~5 -> -4
10%~5 -> 0
(~11)%5 -> 4
(~10)%5 -> 0
(~10)%~5 -> 0
(~9)%~5 -> -4
//% "abcd" 2 -> [1,0,1,0]
5%0 -> DynamicError

~4:5:$ -> [-4,-5]

["abcd":"xzy":$ -> "abcd"
!["abcd":"xzy":$ -> "ax"
!]"abcd":"xzy":$ -> "dy"
!!["abcd":"xzy":$ -> AtlasTypeError

> "abcd":"xzy":$ -> ["xzy"]
!tail "abcd":"xzy":$ -> ["bcd","zy"]
tail 'c -> AtlasTypeError

"abc":"def":"xzy":$ -> ["abc","def","xzy"]
"abc"!:"def":"xzy":$ -> ["adef","bxzy"]
"abc"!!:"def":"xzy":$ -> AtlasTypeError

if 0 then 2 else 3 -> 3
if 1 then 2 else 3 -> 2
if $ then 2 else 3 -> 3
if 0:$ then 2 else 3 -> 2
if [" " then 2 else 3 -> 3
if ["a" then 2 else 3 -> 2

if 1 then 'a else "b" -> "a"
if 1 then 'a else "bcd" -> "aaa"
if "a " then '1 else "23" -> "13"
if "a " then "1" else "2":"3":$ -> ["1","3"]

!if "a b " then "fghi" else "jklm" -> "fkhm"
!if "a b " then 1 else 0 -> [1,0,1,0]

2 ? 0 ) 1 -> 2
2 ? 5 ) 1 -> 1
10 + 2 ? 0 ) 1 -> 12
10 + 2 ? 5 ) 1 -> 11

!`1:2:$ -> ["1","2"]

4["asdfg" -> "asdf"
0["" -> ""
1["" -> ""
(1:2:$)["asdf" -> ["a","as"]
2!["abc":"123":$ -> ["ab","12"]

////////// more advanced circular programming
v1=1:1+v1 -> [1,2,3,4,5...
v1=1:v2=1:v1+v2 -> [1,1,2,3,5,8,13,21...
v1=(0:v1)+v2=1:1+v2 -> [1,3,6,10,15...
v1=1+v1 -> AtlasTypeError

//// test more ops and zips
,1 -> [1,1,1,1...
5![!,"hi" -> ["hhhhh","iiiii"]

;1 -> [1]
!;"hi" ->["h","i"]
2]"asdfg" -> "dfg"
2!]"abc":"123":$ -> ["c","3"]

_"hi":"there":$ -> "hithere"
!_("hi":"there":$):("asdf":"123":$):$ -> ["hithere","asdf123"]
5[_,;1 -> [1,1,1,1,1]

"abc"@"123" -> "abc123"
"abc"@_,"123" -> "abc123123...
(_(,"abc"))@"123" -> "abcabcabc...
"abc"!@"123" -> AtlasTypeError
("a":;"b")!@"1":;"2" -> ["a1","b2"]
'a@"b" -> AtlasTypeError

1eq 2 -> []
1eq 1 -> [1]
'aeq 'a -> "a"
'deq 100 -> AtlasTypeError
"abc"=="abc" -> ["abc"]
"abc"eq "abd" -> []
"abc"eq 'a -> ["a","",""]
"abc"!eq 'a -> AtlasTypeError
"abc"!eq "abd" -> ["a","b",""]

init "asdf" -> "asd"
!init "abc":"123":$ -> ["ab","12"]

\"abc":"123":$ -> ["a1","b2","c3"]
\"abc":"12":"xyz":$ -> ["a1x","b2y","c"]
!\("abc":"123":$):("xyz":"789":$):$ -> [["a1","b2","c3"],["x7","y8","z9"]]

\"abcd" -> ["a","b","c","d"]
\4 -> [[4]]
!\"abc":"123":$ -> [["a","b","c"],["1","2","3"]]

(;5)|6 -> [5,6,6,6,6...
// should not evaluate / 1 0 because outer ? should be known to be true
if (if 1/0 then $ else $)|5 then "T" else "F" -> "T"

// circular programming foldr
[v1=(4:5:;6)+(> v1)|0 -> 15

5&4 -> AtlasTypeError
//"asdf"&4 -> AtlasTypeError
5&"asdf" -> [5,5,5,5]
"asdf"&"123" -> "asd"

// error and catching
v1=init 0:v1 -> InfiniteLoopError
["" -> DynamicError
//catch /9 :1:2:0:3;4 -> f


~"45" -> 45
~" 45" -> 45
~"45 50" -> 45
~"" -> 0
~" " -> 0
~"-a" -> 0
~"-45" -> -45
~"--45" -> 45
~"- 45" -> 45

~'5 -> 5
!~'5 -> AtlasTypeError

~"1 2":"3 4":$ -> [1,3]

// !~ "" -> []
// !~ "45 50" -> [45,50]
// !~ "a45 50 a" -> [45,50]
// !~ :"1 2" :"3 4" $ -> [[1,2],[3,4]]

// complicated test (primes)
_!if (1+v1=1:(v2=2:1+v2)*v1)%v2 then ,$ else !;v2 -> [2,3,5,7,11...

// aliases of special zip
//!read "4 5 6" -> [4,5,6]

!]v1=(,0)!:v1+(1:2:;3):;4:5:;6 -> [6,15]

;$ -> [[]]
[;$ -> []

// check incorrect faith attempt
// this would attempt to access invalid elements if said check was not in place
(`(v1=if (;0)!:v2=v1+;;3 then 0[;;4 else 0[;;5))@`v2 -> InfiniteLoopError

// Test auto replicating of nil
_!if "______MA_" eq '_ then !;"CHISTMAS" else $ -> "CHISTM"

// Test implicit cons
1 (;2+3) -> [1,5]
'a "234" -> "a234"
1 a=;2 -> [1,2]
1 a@a=;2 -> [1,2,2]
'a if 1 then "b" else "c" -> "ab"
'a "c" ? 1 ) "b" -> "ab"
