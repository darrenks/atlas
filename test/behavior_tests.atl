// test atoms
4 -> 4 : Int
45 -> 45

"" -> "" : [Char]
"hi" -> "hi"
"//" -> "//"
"\n\\"!; -> ["\n","\\"]
"\x02\x20\xaa"!; -> ["\x02"," ","\xaa"]

// test utf8 encoding chars
"├───╯"!; -> ["├","─","─","─","╯"]

'a -> 'a
'\n -> '\n
'\0 -> '\0
'\ -> '\\
'" -> '"
'' -> ''
//'-> asdf
'\xff-'\0 -> 255
'\xff -> '\xff
'\0+5 -> '\x05

// disallowed since not needed
// '\" -> '\"'
// '\' -> '''

/////////////////// test basic ops
5~ -> -5
5~~ -> 5
1+2 -> 3
"a"[+1 -> 'b
1+$ -> AtlasTypeError
$%2 -> AtlasTypeError
// leading 0 is separate number
0-12 -> -12
0/12 -> 0
$ -> [] : Nil

$[ -> DynamicError
$] -> DynamicError
5 6> -> [6]
5;> -> []
// todo may want to reconsider and make empty
$ tail -> DynamicError

/////////// test vars
5:v1+v1 -> 10

//////// test infinite list
1 v1:v1 -> [1,1,1,1,1,1,...
'- v1:v1 -> "-------------...

////////////// test zips
3 4+1 -> [4,5]
3 4(5 7;)+1 -> [[4,5],[6,8]]
1+"asdf" -> "bteg"
"asdf"+1 -> "bteg"
(1 2)+(4 6 8) -> [5,8]
(4 6 8)+(1 2) -> [5,8]

4*5 -> 20

4-1 -> 3
"asdf"-1 -> "`rce"
"abcd"-"aaa" -> [0,1,2]

10/5 -> 2
9/5 -> 1
11/(5~) -> -3
10/(5~) -> -2
11~/5 -> -3
10~/5 -> -2
10~/(5~) -> 2
9~/(5~) -> 1
1/0 -> DynamicError
0/0 -> DynamicError

10%5 -> 0
9%5 -> 4
11%(5~) -> -4
10%(5~) -> 0
11~%5 -> 4
10~%5 -> 0
10~%(5~) -> 0
9~%(5~) -> -4
//% "abcd" 2 -> [1,0,1,0]
5%0 -> DynamicError

4 (5~) -> [4,-5]
4~ 5 -> [-4,5]
4 5~ -> [-4,-5]

"abcd"; "xzy" [ -> "abcd"
"abcd"; "xzy" ![ -> "ax"
"abcd"; "xzy" !] -> "dy"
"abcd"; "xzy" !![ -> AtlasTypeError

"abcd"; "xzy" > -> ["xzy"]
"abcd"; "xzy" !tail -> ["bcd","zy"]
'c tail -> AtlasTypeError

"abc"; ("def"; "xzy") -> ["abc","def","xzy"]
"abc"! ("def"; "xzy") -> ["adef","bxzy"]
"abc"!! ("def"; "xzy") -> [["ad","be","cf"],["ax","bz","cy"]]

0 then 2 else 3 -> 3
1 then 2 else 3 -> 2
$ then 2 else 3 -> 3
0; then 2 else 3 -> 2
" "[ then 2 else 3 -> 3
"a"[ then 2 else 3 -> 2

1 then 'a else "b" -> "a"
1 then 'a else "bcd" -> "aaa"
"a " then '1 else "23" -> "13"
"a " then "1" else ("2"; "3") -> ["1","3"]

"a b " !then "fghi" else "jklm" -> "fkhm"
"a b " !then 1 else 0 -> [1,0,1,0]

0 ? 1 ) 2 -> 2
1 ? 2 ) 3 -> 2
0 ? 1 ) 2 + 10 -> 12
5 ? 1 ) 2 + 10 -> 11

1 2 !` -> ["1","2"]

 "asdf"[(1 2) -> ["a","as"]
"abc"; "123"![2 -> ["ab","12"]

////////// more advanced circular programming
1 (1+v1):v1 -> [1,2,3,4,5...
1(1(v1+v2):v2):v1 -> [1,1,2,3,5,8,13,21...
0 v1+(1(1+v2):v2):v1 -> [1,3,6,10,15...
1+v1:v1 -> AtlasTypeError

//// test more ops and zips
1, -> [1,1,1,1...
"hi"!,![5 -> ["hhhhh","iiiii"]


1; -> [1]
"hi"!; ->["h","i"]
"asdfg"]2 -> "dfg"
"abc"; "123"!]2 -> ["c","3"]

"hi"; "there"_ -> "hithere"
"hi"; "there"; ("asdf"; "123";)!_ -> ["hithere","asdf123"]
1;,_[5 -> [1,1,1,1,1]

"abc" "123" -> "abc123"
"abc" ("123",_) -> "abc123123...
"abc",_ "123" -> "abcabcabc...
"abc"! "123" -> ["a1","b2","c3"]
"a"; "b"! ("1"; "2") -> ["a1","b2"]
'a "b" -> "ab"

1=2 -> []
1=1 -> [1]
'a='a -> "a"
'd=100 -> AtlasTypeError
"abc"="abc" -> ["abc"]
"abc"="abd" -> []
"abc"='a -> ["a","",""]
"abc"!='a -> AtlasTypeError
"abc"!="abd" -> ["a","b",""]

"asdf"< -> "asd"
"abc"; "123"!< -> ["ab","12"]

"abc"; "123"\ -> ["a1","b2","c3"]
"abc"; "12" ("xyz";)\ -> ["a1x","b2y","c"]
"abc"; "123"; ("xyz"; "789")!\ -> [["a1","b2","c3"],["x7","y8","z9"]]

"abcd"\ -> ["a","b","c","d"]
4\ -> [[4]]
"abc"; "123"!\ -> [["a","b","c"],["1","2","3"]]

5;|6 -> [5,6,6,6,6...
// should not evaluate / 1 0 because outer ? should be known to be true
1/0 then $ else $|5 then "T" else "F" -> "T"

// circular programming foldr
4 5 6+(v1>|0):v1[ -> 15

5&4 -> AtlasTypeError
//"asdf"&4 -> AtlasTypeError
5&"asdf" -> [5,5,5,5]
"asdf"&"123" -> "asd"

// error and catching
0 (v1<):v1 -> InfiniteLoopError
""[ -> DynamicError
//catch /9 :1:2:0:3;4 -> f


"45"~ -> 45
" 45"~ -> 45
"45 50"~ -> 45
""~ -> 0
" "~ -> 0
"-a"~ -> 0
"-45"~ -> -45
"--45"~ -> 45
"- 45"~ -> 45

'5~ -> 5
'5!~ -> AtlasTypeError

"1 2"; "3 4"~ -> [1,3]

// !~ "" -> []
// !~ "45 50" -> [45,50]
// !~ "a45 50 a" -> [45,50]
// !~ :"1 2" :"3 4" $ -> [[1,2],[3,4]]

// complicated test (primes)
(1+(1 (v2*v1):v1))%(2 (1+v2):v2) !then $, else (v2!;) _ -> [2,3,5,7,11...

// aliases of special zip
//!read "4 5 6" -> [4,5,6]

0,! (v1+(1 2 3; (4 5 6))):v1!] -> [6,15]

$; -> [[]]
$;[ -> []

// check incorrect faith attempt
// this would attempt to access invalid elements if said check was not in place
0;! (v1+(3;;):v2) then 4;;[0 else (5;;[0):v1` (v2`) -> InfiniteLoopError

// Test auto replicating of nil
"______MA_"='_ !then "CHISTMAS"!; else $_ -> "CHISTM"

// Test implicit cons
1(2+3;) -> [1,5]
'a"234" -> "a234"
1(2;) -> [1,2]
1 (2;:a) a  -> [1,2,2]
'a(1 then "b" else "c") -> "ab"
'a(1 then "b" else "c") -> "ab"
0("asdf" !then 1, else (2,)) -> [0,1,1,1,1]

// Test promotion
1(2~) -> [1,-2]
'a! "cd" -> ["ac","ad"]
"123"!~ -> [1,2,3]
"asdf"\ -> ["a","s","d","f"]


// Test parse uses previous token correct
1 (2~) -> [1,-2]
