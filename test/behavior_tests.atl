-- test ints
4 -> 4
45 -> 45

-- test string and escapes
"" -> ""
"hi" -> "hi"
"--" -> "--"
"\n\\"; -> ["\n","\\"]
"\x02\x20\xaa"; -> ["\x02"," ","\xaa"]

-- test utf8 encoding chars
"├───╯"; -> ["\{9500}","\{9472}","\{9472}","\{9472}","\{9583}"]

-- test char and escapes
'a -> 'a
'\n -> '\n
'\0 -> '\0
'\ -> '\\
'" -> '"
'' -> ''
'-> LexError
'\xff-'\0 -> 255
'\xff -> '\xff
'\0+5 -> '\x05
-- test '- minus doesn't get commented out
'--2 -> '+

-- Test implicit op
1+1 3 -> 6
(1+1)3 -> 6
-- todo
-- 1,2"b" -> <"1b","2b">
"abc"+0"123" -> "abc123"
-- todo
-- ("a","c")"d" -> <"ad","cd">

"abc","def","xyz"[(1,2,3) -> ["a","de","xyz"]

-- Test auto promotion
5\ -> [[5]]
'5 read -> [5]
-- 1'a -> "1a"

--/ Test no promotion
5[ -> AtlasTypeError

-- not escaped since not needed
'\" --" -> "\\ --"
'\'f -> "\\f"

1+() -> AtlasTypeError
()%2 -> AtlasTypeError
0-12 -> -12
0/12 -> 0
012 -> 12
() -> []
-- ();,()_() -> [[],[]]

()[ -> DynamicError
()] -> DynamicError
5;> -> []

----------/ test vars
5@v1+v1 -> 10

-- test nil
-- ();,(),() -> [[],[],[]]

-------- test infinite list
v1`1@v1 -> [1,1,1,1,1,1,...
v1`'-@v1 -> "-------------...

-------------- test zips
3,4+1 -> [4,5]
3,4,(5,7)+1 -> [[4,5],[6,8]]
1+"asdf" -> "bteg"
"asdf"+1 -> "bteg"
(1;,2)+(4;,6,8) -> [5,8]
(4;,6,8)+(1;,2) -> [5,8]

"asdf"-1 -> "`rce"
"abcd"-"aaa" -> [0,1,2]

"abcd","xzy" %[ -> "abcd"
"abcd","xzy"[ -> "ax"
"abcd","xzy"] -> "dy"
"abcd","xzy" %%[ -> AtlasTypeError

"abcd","xzy" %> -> ["xzy"]
"abcd","xzy" tail -> ["bcd","zy"]
'c tail -> AtlasTypeError

"def","xzy"`"abc" -> ["adef","bxzy"]
"def","xzy";`"abc" -> [["ad","be","cf"],["ax","bz","cy"]]

-- coercion tests
'a | "asdf" -> "aaaa"
-- '  | "asdf" % -> "asdf"
-- "asdf" | 'a% -> "asdf"
-- "" | ('a;) -> "a"
-- 0|"b" -> "b"
-- ""|2 -> "2"
-- 0|'c -> "c"
-- 4,3,0|"f" -> <"4","3","f">
-- 0,1|("f","t") -> ["0","1"]
-- ("f","t")|(0,1) -> ["f","t"]
-- ()|1 -> <>
-- ()|(1;) -> [1]
-- ()|"a" -> "a"

0 & 2 | 3 -> 3
1 & 2 | 3 -> 2
-- () & 2 | 3 -> 3
-- 0; & 2 | 3 -> 2
-- " "[ & 2 | 3 -> 3
-- "a"[ & 2 | 3 -> 2

0 & 'a; -> " "
-- () & 1 -> 0
"" & "asdf" -> ""

-- 1 & 'a | "b" -> <'a>
-- 1 & 'a,@. | "bcd"% -> "aaa"
-- "a " . & '1 | "23" % -> "13"

-- "a b " . & ("fghi".) | ("jklm".) % -> "fkhm"
-- "a b " . & 1 | 0 % -> [1,0,1,0]

"asdf"[(1,2) -> ["a","as"]
"abc","123".[2 -> ["ab","12"]

---------- more advanced circular programming
1+v1`1@v1 -> [1,2,3,4,5...
v1+v2`1@v2`1@v1 -> [1,1,2,3,5,8,13,21...
v1`0+(1+v2`1@v2)@v1 -> [1,3,6,10,15...
1+v1@v1 -> AtlasTypeError

---- test more ops and zips
1, -> [1,1,1,1...
-- "hi".,[5 -> <"hhhhh","iiiii">

"hi"; -> ["h","i"]
"asdfg"]2 -> "dfg"
"abc","123"]2 -> ["c","3"]

"hi","there",("asdf","123")_ -> ["hithere","asdf123"]
1;,_[5 -> [1,1,1,1,1]

"abc"_("123"%,_) -> "abc123123...
"abc"%,__"123" -> "abcabcabc...
"123";`"abc" -> ["a1","b2","c3"]
"a","b"_("1","2") -> ["a1","b2"]
'a "b" -> "ab"

"asdf"< -> "asd"
"abc","123"< -> ["ab","12"]

"abc","123"\ -> ["a1","b2","c3"]
"abc","12","xyz"\ -> ["a1x","b2y","c"]
"abc","123",("xyz","789")\ -> [["a1","b2","c3"],["x7","y8","z9"]]

"abcd"%;\ -> ["a","b","c","d"]
4\ -> [[4]]
"abc","123"%;\ -> [["a","b","c"],["1","2","3"]]

-- circular programming foldr
4,5,6+(v1>,0)@v1[ -> 15

-- error and catching
(v1<)`0@v1 -> InfiniteLoopError
""[ -> DynamicError
--catch /9 :1:2:0:3;4 -> f

-- "a b c".&(1,2,3,4,5,6.;)_ -> [1,3,5]

""` -> []
" "` -> []
"-a"` -> []

'5` -> [5]

"1 2","3 4"` -> [[1,2],[3,4]]

-- complicated test (primes)
-- (1+(v2*v1`1@v1))%(1+v2`2@v2) [20. & (();,.) | (v2.;;)__ -> [2,3,5,7,11...

v1+(1,2,3,(4,5,6))`(0,)@v1] -> [6,15]

(); -> [[]]
();[ -> []

-- check incorrect faith attempt
-- this would attempt to access invalid elements if said check was not in place
0;;._(v1+(3;;)%%@v2.)%&(4;;[0;)|(5;;[0;)[@v1 `__ _(v2 `__) -> DynamicError

-- tails' faith example that needed padding before
a`0+1@a=10#&a|(b%>+1)@b[ -> 19

-- Test auto replicating of nil
"______MA_"='_ & ("CHISTMAS".;) | () _ -> "CHISTM"


-- Test promotion
"123".;` -> <[1],[2],[3]>
"asdf"\ -> ["a","s","d","f"]

5. -> <5>
5% -> AtlasTypeError

-- Test parse uses previous token correct
1 (2-) -> -2

-- Test unary op not used as binary op
2 . 4 -> <8>
'a{\'b -> "ba"

-- Test @ can be applied to { (it is unmodifiable for flip)
1+2@{,} -> [3,2]

-- implicit value is circular program
(+1`0)[5 -> [0,1,2,3,4]
+(1,2,3,4)`0 -> [0,1,3,6,10]
-+(1,2,3,4)`0 -> [0,1,1,2,2]


-- This tests a pathological case in var lookups
a@F _ F@a -> InfiniteLoopError

-- Using the unknown type
a@a -> AtlasTypeError
a@a;# -> 1


-- infinite type
a;@a -> AtlasTypeError

'a-1000 -> '\{-903}

-- test unbalanced ) for use with circular programming/nil
) -> []
`0+1)[5# -> 5
`0)+(1 -> <1,1,1,1...

-- test apply
2*3@+4 -> 14
2*3-@+4 -> 2

1+2@3 -> 7
1+5@@a+a -> 11

-- test apply with implicit circular
`1@-)[3 -> [-1,-1,-1]

-- test flip
1\2 -> 2
"a"\"b" -> "ba"
1`\(2,3) -> [1,2,3]
1-\-2 -> <<-3>>
1,2\\ -> [[1,2]]

-- this would not be useful
-- (a@\2)+a -> 4

-- this would be type A which should not be possible to construct
""&a@a -> DynamicError

(1@"") -> "1"

-- test laziness of chunk while using collatz conjecture problem
a%2&(3*a+1)|(a/2)`8@a=.~%?a[ -> [8,4,2,1]

5@λ*λ -> 25

1,2+0# -> 2
-- test will not unvectorize after vec op
1,2.# -> AtlasTypeError

-- test roman numerals
M -> 1000
D -> 500
C -> 100
L -> 50
X -> 10
V -> 5
I -> 1
XI -> 11
IX -> 9

-- test parse floats
1.01 -> 1.01
0.90 -> 0.9
4e2 -> 400.0
4e-2 -> 0.04
4.1e2 -> 410.0
.3 -> 0.3
.3e2 -> 30.0

-- test catch in faith based circular program works
,0>+(1,2,(1/0),3,4.|55)) -> <65,64,62,7,4>
(1,2,3,4),(5,(1/0),7,8)..|77+b`0@b -> <[0,1,3,6,10],[0,5,82,89,97]>

-- test auto unvec
"1","2","". ~ "abc" -> "ab"

1^ -> <0,1>
